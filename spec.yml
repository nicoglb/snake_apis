openapi: '3.0.2'
info:
  title: Snake
  version: '1.0'
servers:
  - url: http://localhost:3000/v1
tags:
  - name: User
  - name: Score
components:
  schemas:
    user:
      type: object
      properties:
        username:
          type: string
        fullname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    userScores:
      type: object
      properties:
        username: 
          type: string
        date:
          type: string
          format: date-time
        score:
          type: integer
          format: int32    
paths:
  /users:
    get:
      summary: Get the users
      description: Obtener todos los usuarios
      operationId: getUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref:  "#/components/schemas/user"
        '500':
          description: No funciona
      tags:
        - "User"
  /users/{username}:
    get:
      summary: Get a user by username
      description: Obtener un usuario por username
      parameters:
        - name: username
          in: path
          required: true
          description: "username a buscar"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '500':
          description: No funciona
      tags:
        - "User"
  /users/new:
    post:
      tags:
        - "User"
      summary: Create a new user
      description: Crea un nuevo usuario por requestBody
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: CREATED
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '500':
          description: No Funciona
  /users/update/{username}:
    put:
      summary: Update user
      description: Edita un usuario existente
      parameters:
        - name: username
          in: path
          required: true
          description: "username a buscar"
          schema:
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: UPDATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
        '500':
          description: No funciona
      tags:
        - "User"
  /users/delete/{username}:
    delete:
      summary: Delete a user by username
      description: Elimina un usuario por username
      parameters:
        - name: username
          in: path
          required: true
          description: "username a eliminar"
          schema:
            type: "string"
      responses:
        '200':
          description: DELETED
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
        '500':
          description: No funciona
      tags:
        - "User"
  /score:
    get:
      summary: Get the scores of all users
      description: Obtener el puntaje de todos los usuarios
      operationId: getScore
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/userScores"
        '500':
          description: No funciona
      tags:
        - "Score"
  /score/{username}:
    get:
      summary: Get the scores of user
      description: Obtener todos los puntajes de un usuario
      parameters:
        - name: username
          in: path
          required: true
          description: "username a buscar"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    score:
                      type: integer
                      format: int32
        '500':
          description: No funciona
      tags:
        - "Score"
  /score/new:
    post:
      summary: Add new score
      description: Agrega al listado de puntajes de username uno nuevo
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/userScores'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userScores"
        '404':
          description: User not found
        '500':
          description: No funciona
      tags:
        - "Score"
  /score/max/{username}:
    get:
      summary: Get the max score of user
      description: Obtener el mejor puntaje de un usuario
      parameters:
        - name: username
          in: path
          required: true
          description: "username a buscar"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  score:
                    type: integer
                    format: int32
        '500':
          description: No funciona
      tags:
        - "Score"
  /score/last/{username}:
    get:
      summary: Get the last score of user
      description: Obtener el ultimo puntaje de un usuario
      parameters:
        - name: username
          in: path
          required: true
          description: "username a buscar"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  score:
                    type: integer
                    format: int32
        '500':
          description: No funciona
      tags:
        - "Score"
  /score/ranking:
    get:
      summary: Get the best score of all users
      description: Obtener el mejor puntaje de todos los usuarios
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/userScores"
        '500':
          description: No funciona
      tags:
        - "Score"








